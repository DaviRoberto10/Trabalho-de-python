
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import csv

dados = []
caminho_arquivo = None

def criar_entry_padrao(master, largura):
    return tk.Entry(master, width=largura)

def carregar_dados(caminho):
    with open(caminho, encoding='utf-8') as csvfile:
        leitor = csv.DictReader(csvfile)
        return list(leitor)

def salvar_csv():
    if not caminho_arquivo:
        return
    with open(caminho_arquivo, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=['year', 'annual_edition', 'category', 'artist', 'song_or_album', 'winner', 'url'])
        writer.writeheader()
        writer.writerows(dados)

def atualizar_lista(categoria=None, artista=None, ano=None, titulo=None, palavra_chave=None):

    lista.delete(*lista.get_children())
    for item in dados:
        if categoria and item['category'] != categoria:
            continue
        if artista and artista.lower() not in item['artist'].lower():
            continue
        if ano and ano != item['year']:
            continue
        if titulo and titulo.lower() not in item['song_or_album'].lower():
            continue
        if palavra_chave:
            texto_completo = " ".join(item.values()).lower()
            if palavra_chave.lower() not in texto_completo:
                continue
        valores = (
            item['year'],
            item['annual_edition'],
            item['category'],
            item['artist'],
            item['song_or_album'],
            item['winner'],
            item['url']
        )
        tag = "vencedor" if item['winner'].lower() == 'true' else ""
        lista.insert("", "end", values=valores, tags=(tag,))
    lista.tag_configure("vencedor", background="lightgreen")

def abrir_arquivo():
    global dados, caminho_arquivo
    caminho = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
    if caminho:
        caminho_arquivo = caminho
        dados.clear()
        dados.extend(carregar_dados(caminho))
        atualizar_lista()

def buscar():
    atualizar_lista(
        entry_categoria_busca.get(),
        entry_artista.get(),
        entry_ano_busca.get(),
        entry_titulo.get(),
        entry_palavra.get()
    )

def pesquisa_rapida(event=None):
    termo = entry_pesquisa_rapida.get().strip().lower()
    lista.delete(*lista.get_children())
    for item in dados:
        linha_completa = " ".join(item.values()).lower()
        if termo in linha_completa:
            valores = (
                item['year'],
                item['annual_edition'],
                item['category'],
                item['artist'],
                item['song_or_album'],
                item['winner'],
                item['url']
            )
            tag = "vencedor" if item['winner'].lower() == 'true' else ""
            lista.insert("", "end", values=valores, tags=(tag,))
    lista.tag_configure("vencedor", background="lightgreen")

def deletar_item():
    item_selecionado = lista.selection()
    if not item_selecionado:
        messagebox.showwarning("Aviso", "Selecione um item para deletar.")
        return
    resposta = messagebox.askyesno("Confirmação", "Tem certeza que deseja deletar o item selecionado?")
    if resposta:
        for item in item_selecionado:
            valores = lista.item(item, 'values')
            lista.delete(item)
            for d in dados:
                if tuple(d[col] for col in ['year', 'annual_edition', 'category', 'artist', 'song_or_album', 'winner', 'url']) == valores:
                    dados.remove(d)
                    break
        salvar_csv()

def adicionar_linha():
    if not caminho_arquivo:
        messagebox.showerror("Erro", "Você precisa carregar um arquivo CSV primeiro.")
        return

    nova_linha = {
        'year': entry_ano.get(),
        'annual_edition': entry_ano_edicao.get(),
        'category': entry_categoria.get(),
        'artist': entry_artista_nome.get(),
        'song_or_album': entry_titulo_musica.get(),
        'winner': entry_vencedor.get(),
        'url': entry_url.get()
    }

    dados.append(nova_linha)
    valores = tuple(nova_linha[col] for col in ['year', 'annual_edition', 'category', 'artist', 'song_or_album', 'winner', 'url'])
    tag = "vencedor" if nova_linha['winner'].lower() == 'true' else ""
    lista.insert("", "end", values=valores, tags=(tag,))
    lista.tag_configure("vencedor", background="lightgreen")

    salvar_csv()

    for entry in [entry_ano, entry_ano_edicao, entry_categoria, entry_artista_nome, entry_titulo_musica, entry_vencedor, entry_url]:
        entry.delete(0, tk.END)

def editar_item():
    selecionado = lista.selection()
    if not selecionado:
        messagebox.showwarning("Aviso", "Selecione um item para editar.")
        return
    item_id = selecionado[0]
    valores_atuais = lista.item(item_id, "values")

    janela_edicao = tk.Toplevel(root)
    janela_edicao.title("Editar Item")

    campos = ["Ano", "Edição Anual", "Categoria", "Artista", "Música/Álbum", "Vencedor", "URL"]
    entradas = []

    for i, campo in enumerate(campos):
        tk.Label(janela_edicao, text=campo).grid(row=i, column=0, padx=5, pady=5)
        entrada = criar_entry_padrao(janela_edicao, 50)
        entrada.grid(row=i, column=1, padx=5, pady=5)
        entrada.insert(0, valores_atuais[i])
        entradas.append(entrada)

    def salvar_edicao():
        novos_valores = [e.get() for e in entradas]
        lista.item(item_id, values=novos_valores)
        for d in dados:
            if tuple(d[col] for col in ['year', 'annual_edition', 'category', 'artist', 'song_or_album', 'winner', 'url']) == valores_atuais:
                d.update(dict(zip(['year', 'annual_edition', 'category', 'artist', 'song_or_album', 'winner', 'url'], novos_valores)))
                break
        salvar_csv()
        janela_edicao.destroy()

    tk.Button(janela_edicao, text="Salvar", command=salvar_edicao).grid(row=len(campos), column=0, columnspan=2, pady=10)

root = tk.Tk()
root.title("Indicados ao Grammy")
root.geometry("1200x700")

frame_topo = tk.Frame(root)
frame_topo.pack(pady=10)

btn_abrir = tk.Button(frame_topo, text="Abrir CSV", command=abrir_arquivo)
btn_abrir.grid(row=0, column=0, padx=5)

tk.Label(frame_topo, text="Pesquisa Geral").grid(row=0, column=1)
entry_pesquisa_rapida = criar_entry_padrao(frame_topo, 30)
entry_pesquisa_rapida.grid(row=0, column=2, columnspan=2, padx=5)
entry_pesquisa_rapida.bind("<KeyRelease>", pesquisa_rapida)

tk.Label(frame_topo, text="Ano").grid(row=3, column=0)
entry_ano = criar_entry_padrao(frame_topo, 10)
entry_ano.grid(row=3, column=1)

tk.Label(frame_topo, text="Edição Anual").grid(row=3, column=2)
entry_ano_edicao = criar_entry_padrao(frame_topo, 15)
entry_ano_edicao.grid(row=3, column=3)

tk.Label(frame_topo, text="Categoria").grid(row=3, column=4)
entry_categoria = criar_entry_padrao(frame_topo, 20)
entry_categoria.grid(row=3, column=5)

tk.Label(frame_topo, text="Artista").grid(row=4, column=0)
entry_artista_nome = criar_entry_padrao(frame_topo, 20)
entry_artista_nome.grid(row=4, column=1)

tk.Label(frame_topo, text="Música/Álbum").grid(row=4, column=2)
entry_titulo_musica = criar_entry_padrao(frame_topo, 20)
entry_titulo_musica.grid(row=4, column=3)

tk.Label(frame_topo, text="Vencedor (True/False)").grid(row=4, column=4)
entry_vencedor = criar_entry_padrao(frame_topo, 10)
entry_vencedor.grid(row=4, column=5)

tk.Label(frame_topo, text="URL").grid(row=4, column=6)
entry_url = criar_entry_padrao(frame_topo, 30)
entry_url.grid(row=4, column=7)

btn_adicionar = tk.Button(frame_topo, text="Adicionar Linha", command=adicionar_linha)
btn_adicionar.grid(row=4, column=8, padx=5)

colunas = ("Ano", "Edição Anual", "Categoria", "Artista", "Música/Álbum", "Vencedor", "URL")
frame_lista = tk.Frame(root)
frame_lista.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

scrollbar_y = tk.Scrollbar(frame_lista, orient="vertical")
lista = ttk.Treeview(frame_lista, columns=colunas, show="headings", yscrollcommand=scrollbar_y.set)
scrollbar_y.config(command=lista.yview)
scrollbar_y.pack(side=tk.RIGHT, fill=tk.Y)
lista.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

larguras = [70, 110, 170, 150, 180, 80, 300]
for col, largura in zip(colunas, larguras):
    lista.heading(col, text=col)
    lista.column(col, width=largura)

root.mainloop()