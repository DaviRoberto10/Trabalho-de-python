import tkinter as tk
from tkinter import ttk, messagebox
import csv
import os

# ======================= VARIÁVEIS GLOBAIS =======================
dados = []
caminho_arquivo = 'grammy_winners.csv'
usuarios_arquivo = 'usuarios.csv'

# ======================= FUNÇÕES DO GRAMMY =======================
def carregar_dados(caminho):
    if not os.path.exists(caminho):
        return []
    with open(caminho, encoding='utf-8') as csvfile:
        leitor = csv.DictReader(csvfile)
        return list(leitor)

def salvar_csv():
    with open(caminho_arquivo, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=['year', 'annual_edition', 'category', 'artist', 'song_or_album', 'winner', 'url'])
        writer.writeheader()
        writer.writerows(dados)

def inserir_na_lista(item):
    valores = tuple(item[col] for col in ['year', 'annual_edition', 'category', 'artist', 'song_or_album', 'winner', 'url'])
    tag = "vencedor" if item['winner'].lower() == 'true' else ""
    lista.insert("", "end", values=valores, tags=(tag,))
    lista.tag_configure("vencedor", background="lightgreen")

def atualizar_lista(categoria=None, artista=None, ano=None, titulo=None, palavra_chave=None):
    lista.delete(*lista.get_children())
    for item in dados:
        if categoria and categoria.lower() not in item['category'].lower():
            continue
        if artista and artista.lower() not in item['artist'].lower():
            continue
        if ano and ano not in item['year']:
            continue
        if titulo and titulo.lower() not in item['song_or_album'].lower():
            continue
        if palavra_chave:
            texto_completo = " ".join(item.values()).lower()
            if palavra_chave.lower() not in texto_completo:
                continue
        inserir_na_lista(item)

def buscar():
    atualizar_lista(
        entry_categoria_busca.get(),
        entry_artista.get(),
        entry_ano_busca.get(),
        entry_titulo.get(),
        entry_palavra.get()
    )

def deletar_item():
    item_selecionado = lista.selection()
    if not item_selecionado:
        messagebox.showwarning("Aviso", "Selecione um item para deletar.")
        return
    if messagebox.askyesno("Confirmação", "Tem certeza que deseja deletar o item selecionado?"):
        for item in item_selecionado:
            valores = lista.item(item, 'values')
            lista.delete(item)
            for d in dados:
                if tuple(d[col] for col in ['year', 'annual_edition', 'category', 'artist', 'song_or_album', 'winner', 'url']) == valores:
                    dados.remove(d)
                    break
        salvar_csv()

def adicionar_linha():
    nova_linha = {
        'year': entry_ano.get(),
        'annual_edition': entry_ano_edicao.get(),
        'category': entry_categoria.get(),
        'artist': entry_artista_nome.get(),
        'song_or_album': entry_titulo_musica.get(),
        'winner': entry_vencedor.get(),
        'url': entry_url.get()
    }

    dados.append(nova_linha)
    inserir_na_lista(nova_linha)
    salvar_csv()

    for entry in [entry_ano, entry_ano_edicao, entry_categoria, entry_artista_nome, entry_titulo_musica, entry_vencedor, entry_url]:
        entry.delete(0, tk.END)

def editar_item():
    selecionado = lista.selection()
    if not selecionado:
        messagebox.showwarning("Aviso", "Selecione um item para editar.")
        return

    item_id = selecionado[0]
    valores_atuais = lista.item(item_id, "values")

    janela_edicao = tk.Toplevel(root)
    janela_edicao.title("Editar Item")

    campos = ["Ano", "Edição Anual", "Categoria", "Artista", "Música/Álbum", "Vencedor", "URL"]
    entradas = []

    for i, campo in enumerate(campos):
        tk.Label(janela_edicao, text=campo).grid(row=i, column=0, padx=5, pady=5)
        entrada = tk.Entry(janela_edicao, width=50)
        entrada.grid(row=i, column=1, padx=5, pady=5)
        entrada.insert(0, valores_atuais[i])
        entradas.append(entrada)

    def salvar_edicao():
        novos_valores = [e.get() for e in entradas]
        lista.item(item_id, values=novos_valores)
        for d in dados:
            if tuple(d[col] for col in ['year', 'annual_edition', 'category', 'artist', 'song_or_album', 'winner', 'url']) == valores_atuais:
                d.update(dict(zip(['year', 'annual_edition', 'category', 'artist', 'song_or_album', 'winner', 'url'], novos_valores)))
                break
        salvar_csv()
        janela_edicao.destroy()

    tk.Button(janela_edicao, text="Salvar", command=salvar_edicao).grid(row=len(campos), column=0, columnspan=2, pady=10)

def iniciar_aplicacao_grammy():
    global root, entry_categoria_busca, entry_artista, entry_ano_busca, entry_titulo, entry_palavra
    global entry_ano, entry_ano_edicao, entry_categoria, entry_artista_nome, entry_titulo_musica, entry_vencedor, entry_url, lista

    root = tk.Tk()
    root.title("Indicados ao Grammy")
    root.geometry("1400x700")
    root.configure(bg="#1a1a1a")  # fundo igual ao menu inicial

    style = ttk.Style()
    style.theme_use('default')
    style.configure("Treeview",
                    background="#2e2e2e",
                    foreground="white",
                    rowheight=25,
                    fieldbackground="#333333")
    style.configure("Treeview.Heading", font=("Arial", 10, "bold"), background="#333333", foreground="white")
    style.map('Treeview', background=[('selected', '#4CAF50')], foreground=[('selected', 'black')])

    frame_topo = tk.LabelFrame(root, text="Busca e Cadastro", bg="#1a1a1a", fg="white", padx=10, pady=10)
    frame_topo.pack(pady=10, padx=10, fill=tk.X)

    def adicionar_label_input(texto, linha, coluna, largura=20):
        tk.Label(frame_topo, text=texto, bg="#1a1a1a", fg="white").grid(row=linha, column=coluna, padx=5, pady=5, sticky='w')
        entry = tk.Entry(frame_topo, width=largura, bg="#333333", fg="white", insertbackground="white")
        entry.grid(row=linha, column=coluna + 1, padx=5, pady=5)
        return entry

    entry_categoria_busca = adicionar_label_input("Categoria", 0, 0)
    entry_artista = adicionar_label_input("Artista", 0, 2)
    entry_ano_busca = adicionar_label_input("Ano", 0, 4, 10)
    entry_titulo = adicionar_label_input("Título Música/Álbum", 0, 6)
    entry_palavra = adicionar_label_input("Palavra-chave", 0, 8, 15)

    tk.Button(frame_topo, text="Buscar", command=buscar, bg="#4CAF50", fg="black").grid(row=0, column=10, padx=5)
    tk.Button(frame_topo, text="Deletar", command=deletar_item, bg="#f44336", fg="white").grid(row=1, column=0, pady=5)
    tk.Button(frame_topo, text="Editar", command=editar_item, bg="#FFC107", fg="black").grid(row=1, column=1)

    entry_ano = adicionar_label_input("Ano", 2, 0, 10)
    entry_ano_edicao = adicionar_label_input("Edição Anual", 2, 2, 15)
    entry_categoria = adicionar_label_input("Categoria", 2, 4)
    entry_artista_nome = adicionar_label_input("Artista", 3, 0)
    entry_titulo_musica = adicionar_label_input("Música/Álbum", 3, 2)
    entry_vencedor = adicionar_label_input("Vencedor (True/False)", 3, 4, 15)
    entry_url = adicionar_label_input("URL", 3, 6, 40)

    tk.Button(frame_topo, text="Adicionar", command=adicionar_linha, bg="#4CAF50", fg="black").grid(row=3, column=8, padx=10)

    colunas = ("Ano", "Edição Anual", "Categoria", "Artista", "Música/Álbum", "Vencedor", "URL")
    frame_lista = tk.Frame(root, bg="#1a1a1a")
    frame_lista.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

    scrollbar_y = tk.Scrollbar(frame_lista)
    lista = ttk.Treeview(frame_lista, columns=colunas, show="headings", yscrollcommand=scrollbar_y.set)
    scrollbar_y.config(command=lista.yview)
    scrollbar_y.pack(side=tk.RIGHT, fill=tk.Y)
    lista.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    larguras = [70, 110, 170, 150, 180, 80, 300]
    for col, largura in zip(colunas, larguras):
        lista.heading(col, text=col)
        lista.column(col, width=largura)

    dados.clear()
    dados.extend(carregar_dados(caminho_arquivo))
    atualizar_lista()



    # Carregar dados
    dados.clear()
    dados.extend(carregar_dados(caminho_arquivo))
    atualizar_lista()

    root.mainloop()

# ======================= SISTEMA DE LOGIN =======================
def verificar_usuarios():
    if not os.path.exists(usuarios_arquivo):
        with open(usuarios_arquivo, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['usuario', 'senha'])

def cadastrar():
    usuario = entry_usuario.get()
    senha = entry_senha.get()
    if not usuario or not senha:
        messagebox.showerror("Erro", "Preencha todos os campos")
        return
    with open(usuarios_arquivo, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([usuario, senha])
    messagebox.showinfo("Sucesso", "Usuário cadastrado com sucesso!")

def logar():
    usuario = entry_usuario.get()
    senha = entry_senha.get()
    with open(usuarios_arquivo, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['usuario'] == usuario and row['senha'] == senha:
                janela_login.destroy()
                menu_inicial(usuario)
                return
    messagebox.showerror("Erro", "Usuário não encontrado!")

# ======================= MENU INICIAL =======================
def menu_inicial(usuario_logado):
    menu = tk.Tk()
    menu.title("Menu Inicial")
    menu.geometry("800x500")
    menu.configure(bg="#1a1a1a")

    # Frame lateral
    barra_lateral = tk.Frame(menu, bg="#333333", width=200)
    barra_lateral.pack(side=tk.LEFT, fill=tk.Y)

    # Topo da barra lateral (usuario)
    topo = tk.Frame(barra_lateral, bg="#1a1a1a", height=60)
    topo.pack(fill=tk.X)
    tk.Label(topo, text=usuario_logado, bg="#1a1a1a", fg="white", 
             font=("Arial", 12, "bold")).pack(pady=20, padx=10, anchor='w')

    # Botão acessar - agora abre a tela do Grammy
    btn_acessar = tk.Button(barra_lateral, text="Acessar", bg="#4CAF50", fg="white", 
                           font=("Arial", 12, "bold"), relief="flat", width=15, height=2, bd=0,
                           command=iniciar_aplicacao_grammy)
    btn_acessar.pack(pady=40)

    # Versão
    tk.Label(barra_lateral, text="Versão.1.0.0", bg="#333333", fg="white", 
             font=("Arial", 9)).pack(side=tk.BOTTOM, pady=10)

    # Parte direita (área principal)
    direita = tk.Frame(menu, bg="#1a1a1a")
    direita.pack(expand=True, fill=tk.BOTH)

    # Mensagem de boas-vindas
    tk.Label(direita, text="Bem-vindo ao VItrola", bg="#1a1a1a", fg="white", 
             font=("Arial", 16)).pack(pady=200)

    menu.mainloop()

# ======================= TELA DE LOGIN =======================
verificar_usuarios()

janela_login = tk.Tk()
janela_login.title("Login")
janela_login.geometry("300x250")
janela_login.configure(bg="white")

tk.Label(janela_login, text="Usuário:", bg="white").pack(pady=5)
entry_usuario = tk.Entry(janela_login)
entry_usuario.pack(pady=5)

tk.Label(janela_login, text="Senha:", bg="white").pack(pady=5)
entry_senha = tk.Entry(janela_login, show="*")
entry_senha.pack(pady=5)

tk.Button(janela_login, text="Cadastrar", command=cadastrar).pack(pady=10)
tk.Button(janela_login, text="Login", command=logar).pack()

janela_login.mainloop()